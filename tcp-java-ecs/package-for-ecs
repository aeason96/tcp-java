#!/bin/bash

# Create the Docker image for the service.
# Takes one argument: the image repo (with no label).
????# Label it with the first 7 chars of GIT_COMMIT and also with :latest
# All actions are local to the VM; does not use aws or ecs-cli.
# Should be run before configure-for-ecs and deploy-to-ecs are run.
# Should be run before deploy-to-ecs is run.
# Assumes the environemnt variable GIT_COMMIT is set (typically by Jenkins).
# Assumes the directory for the service exists in this directory,
# its name matches "*-ecs", and it is the only directory that matches.

# Fail on any error; unset variables are errors; show commands before executing:
set -eux

IMAGE_REPO="$1"

GIT_COMMIT=${GIT_COMMIT:-unknown}
GIT_COMMIT=${GIT_COMMIT:0:7}

ECS_DIR=$(find . -maxdepth 1 -type d -name "*-ecs")

# TODO: see if logging anything from this script would be helpful

# TODO: make sure we're in the correct (root) directory
# Can just check for Dockerfile, and cd .. if not there

echo "=== package-for-ecs ==="
date

echo "Running in $PWD"
echo "IMAGE_REPO is $IMAGE_REPO"
if [[ "$IMAGE_REPO" = "" ]] ; then
    echo "ERROR: missing or empty image repository provided.  Quitting...."
    exit 2;
fi

docker --version
ls -al Docker* generate-keystore

password=$(echo -n "fpnggretbevrf" | tr '[a-mn-zA-MN-Z]' '[n-za-mN-ZA-M]')
# TODO: figure out how secure the keystore password needs to be, and how to get it

echo "Generating the keystore and .env file..."
cat <<EOF > gk-input
keystore
$password
Nobody
DevOps
Excella
Arlington
VA
US
yes
EOF

./generate-keystore < gk-input && rm gk-input

echo "Adding IMAGE_REPO to .env file..."
cat <<EOF >> .env
TIMESTAMP="$(date)"
IMAGE_REPO=$IMAGE_REPO
EOF

echo "git commit hash is $GIT_COMMIT"
mkdir -p src/assets/img
git log -1 > src/main/resources/commit

echo "Building the $IMAGE_REPO Docker image..."
# TODO: may need sudo, or to run this script as sudo?
docker build -t $IMAGE_REPO:$GIT_COMMIT . -f $ECS_DIR/Dockerfile
# deploy script will look for $IMAGE_REPO:$GIT_COMMIT *and* $IMAGE_REPO:latest
# TODO: should we even be tagging it "latest" yet?
docker tag $IMAGE_REPO:$GIT_COMMIT $IMAGE_REPO:latest

echo "Checking for the Docker image..."
docker image ls | grep $IMAGE_REPO

date
