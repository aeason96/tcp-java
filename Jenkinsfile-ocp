def appName = 'tcp-java'
def DEV_ENV = 'development'
def DEFAULT_ENV = 'default'
def S2I_IMAGE = 'fabric8/s2i-java:latest-java11'
def REPO_URL = 'https://github.com/excellaco/tcp-java'
def AWS_PROVISIONING_SECRET = 'aws-provisioning-iam'

def secret_data

pipeline {
  agent none
  stages {
    stage ('Get AWS Credentials') {
      agent {
        label 'nodejs'
      }
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject(DEFAULT_ENV) {
              secret_data = openshift.selector("secret", AWS_PROVISIONING_SECRET).object().data
            }
          }
        }
      }
    }
    stage('RDS Test Run') {
      agent {
        kubernetes {
          label 'terraform-update'
          cloud 'openshift'
          defaultContainer 'terraform'
          yamlFile 'podtemplates/terraformpod.yml'
        }
      }
      steps {
        script {
          sh "terraform version"
          sh "echo ${secret_data.ACCESS_KEY}"
        }
      }
    }
    stage('Unit Tests') {
      agent {
        kubernetes {
          label 'jdk11-testing'
          cloud 'openshift'
          defaultContainer 'java11'
          yamlFile 'podtemplates/gradlepod.yml'
        }
      }
      steps {
        container('java11') {
          gradle('clean verGJF')
          gradle('testNG')
          gradle('jacocoTestReport')
          gradle('jacocoTestCoverageVerification')
        }
      }
      post{
        always {
          junit '**/build/test-results/testNG/TEST-*.xml'
        }
      }
    }
    stage('Create Dev Configs') {
      agent {
        label 'nodejs'
      }
      when {
        not {
          expression {
            openshift.withCluster() {
              openshift.withProject(DEV_ENV) {
                return openshift.selector("bc", appName).exists()
              }
            }
          }
        }
      }
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject(DEV_ENV) {
              def app = openshift.newApp("${S2I_IMAGE}~${REPO_URL}", "--name='${appName}'", "--strategy=source")
              def logs = app.narrow('bc').logs('-f')
            }
          }
        }
      }
    }

    stage('Start Build') {
      agent {
        label 'nodejs'
      }
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject(DEV_ENV) {
              openshift.startBuild(appName, "--follow")
            }
          }
        }
      }
    }
  }
}

def gradle(String... args) {
    sh "gradle ${args.join(' ')} -s"
}
